package project_euler.problem_1_25

import kotlin.math.sqrt

/**
 * Highly divisible triangular number. / Треугольное число с большим количеством делителей.
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
 * 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Let us list the factors of the first seven triangle numbers:
 * 1: 1
 * 3: 1,3
 * 6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?
 *
 * Последовательность треугольных чисел образуется путем сложения натуральных чисел. К примеру, 7-е треугольное число
 * равно 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. Первые десять треугольных чисел:
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 * Перечислим делители первых семи треугольных чисел:
 * 1: 1
 * 3: 1, 3
 * 6: 1, 2, 3, 6
 * 10: 1, 2, 5, 10
 * 15: 1, 3, 5, 15
 * 21: 1, 3, 7, 21
 * 28: 1, 2, 4, 7, 14, 28
 * Как мы видим, 28 - первое треугольное число, у которого более пяти делителей.
 * Каково первое треугольное число, у которого более пятисот делителей?
 */

fun main() {
    val divisorsLimit = 500

    var isFound = false
    var i = 0

    while (!isFound) {
        i++
        val triangleNumber = getTriangleNumberByItem(i)
        val divisorsCounter = findDivisorsAmount(triangleNumber)
        // printAllDivisors(triangleNumber)

        if (divisorsCounter > divisorsLimit) {
            println("Divisors > $divisorsLimit. The value of the triangle number is $triangleNumber.")
            isFound = true
        }
    }
}

fun getTriangleNumberByItem(i: Int): Int {
    // Нахождение треугольных чисел
    var triangleNumber = 0
    for (j in 1..i) {
        triangleNumber += j
    }
    // ↓ Вывод всех треугольных чисел ↓
    println("[$i]: $triangleNumber")
    return triangleNumber
}

fun findDivisorsAmount(number: Int): Int {
    // Нахождение количества делителей числа
    val top = sqrt(number.toDouble()).toInt()
    var counter = 0
    for (k in (1..top).filter { number % it == 0 }) {
        counter += 2
    }
    if (top * top == number) counter--
    println("Divisors amount: $counter")
    return counter
}

fun printAllDivisors(number: Int) {
    // Нахождение всех делителей числа
    val divisors = mutableListOf<Int>()
    for (k in (1..number).filter { (number % it == 0) }) {
        divisors.add(k)
    }
    // ↓ Вывод всех делителей числа ↓
    println(divisors.toString())
    println()
}